/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "JuceHeader.h"
#include "GUI/MainWindow.h"
#include "GUI/GrooveboxLookAndFeel.h"
#include "GrooveboxMemory/OverallMemoryBlock.h"
#include "GrooveboxMemory/QuickSysExBlock.h"
#include "GrooveboxMemory/Waveforms.h"
#include "MIDIConnection/GrooveboxConnector.h"
#include "GUI/GrooveboxSplashScreen.h"

ApplicationProperties* appProperties;
MidiInput* midiInputDevice;
MidiOutput* midiOutputDevice;
int preferredMidiInId=-1;
int preferredMidiOutId = -1;
GrooveboxConnector* grooveboxConnector=nullptr;
TooltipWindow* toolTipWindow;
UndoManager* undoManager;
OverallMemoryBlock* grooveboxMemory;
QuickSysExBlock* quickSysEx;
Waveforms* waveForms;
ApplicationCommandManager* applicationCommandManager;
OpenGLContext* openGlContext;
GrooveboxSplashScreen* splashScreen;

//==============================================================================
class MC307SysExApplication  : public JUCEApplication
{
public:
    //==============================================================================
    MC307SysExApplication() {}

    const String getApplicationName()       { return ProjectInfo::projectName; }
    const String getApplicationVersion()    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed()       { return true; }

    //==============================================================================
    void initialise (const String& /*commandLine*/)
    {
		//_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
		//_CrtSetBreakAlloc(9554);
		//_CrtSetBreakAlloc(9553);
		//_CrtSetBreakAlloc(9552);

        // This method is where you should put your application's initialisation code..

		splashScreen = new GrooveboxSplashScreen("STARTING UP" + String(CharPointer_UTF8("\xe2\x80\xa6")), 480, 320, true);
		

		#if JUCE_OPENGL
		if (openGlContext == nullptr)
		{
			openGlContext = new OpenGLContext();
		}
		#endif

		applicationCommandManager = new ApplicationCommandManager();
		applicationCommandManager->registerAllCommandsForTarget(this);
		appProperties = new ApplicationProperties();
		PropertiesFile::Options options;
		options.applicationName = getApplicationName();
		appProperties->setStorageParameters(options);
		undoManager = new UndoManager();
		midiInputDevice = nullptr;
		midiOutputDevice = nullptr;
		preferredMidiInId = (appProperties->getUserSettings()->getIntValue("MidiInId", MidiInput::getDefaultDeviceIndex()));
		preferredMidiOutId = (appProperties->getUserSettings()->getIntValue("MidiOutId", MidiOutput::getDefaultDeviceIndex()));
		grooveboxConnector = new GrooveboxConnector();
		grooveboxMemory = /*nullptr;*/ new OverallMemoryBlock();
		quickSysEx = new QuickSysExBlock();
		waveForms = new Waveforms((grooveboxConnector->getActiveConnection() != nullptr) ?
			grooveboxConnector->getActiveConnection()->deviceFamilyNumberCode :
			GrooveboxConnector::Model_Unknown);
		lookAndFeel = new GrooveboxLookAndFeel();
		LookAndFeel::setDefaultLookAndFeel(lookAndFeel);
        mainWindow = new MainWindow();
		#if JUCE_OPENGL
		if (openGlContext != nullptr) openGlContext->attachTo(*mainWindow);
		#endif
		mainWindow->setResizable(true,true);
		toolTipWindow = new TooltipWindow();
		mainWindow->getContentComponent()->grabKeyboardFocus();
		deleteAndZero(splashScreen);
    }

    void shutdown()
    {
        // Add your application's shutdown code here..
		appProperties->saveIfNeeded();
		deleteAndZero(appProperties);
		deleteAndZero(midiInputDevice);
		deleteAndZero(midiOutputDevice);
		deleteAndZero(toolTipWindow);
		deleteAndZero(undoManager);
		if (grooveboxConnector!=nullptr) deleteAndZero(grooveboxConnector);
		#if JUCE_OPENGL
		if (openGlContext != nullptr) openGlContext->detach();
		deleteAndZero(openGlContext);
		#endif
        mainWindow = nullptr; // (deletes our window)
		lookAndFeel = nullptr;
		deleteAndZero(quickSysEx);
		deleteAndZero(waveForms);
		if (grooveboxMemory!=nullptr) deleteAndZero(grooveboxMemory);
		deleteAndZero(applicationCommandManager);
		if (splashScreen != nullptr) deleteAndZero(splashScreen);
		// deletes itself, dont uncomment this!: deleteAndZero(splashScreen);
    }

    //==============================================================================
    void systemRequestedQuit()
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }

    void anotherInstanceStarted (const String& /*commandLine*/)
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

    
private:
    ScopedPointer<MainWindow> mainWindow;
	ScopedPointer<GrooveboxLookAndFeel> lookAndFeel;
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (MC307SysExApplication)
